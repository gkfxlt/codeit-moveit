// Generated by gencpp from file _object_recognition_msgs/GetObjectInformationRequest.msg
// DO NOT EDIT!


#ifndef _OBJECT_RECOGNITION_MSGS_MESSAGE_GETOBJECTINFORMATIONREQUEST_H
#define _OBJECT_RECOGNITION_MSGS_MESSAGE_GETOBJECTINFORMATIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <_object_recognition_msgs/ObjectType.h>

namespace _object_recognition_msgs
{
template <class ContainerAllocator>
struct GetObjectInformationRequest_
{
  typedef GetObjectInformationRequest_<ContainerAllocator> Type;

  GetObjectInformationRequest_()
    : type()  {
    }
  GetObjectInformationRequest_(const ContainerAllocator& _alloc)
    : type(_alloc)  {
  (void)_alloc;
    }



   typedef  ::_object_recognition_msgs::ObjectType_<ContainerAllocator>  _type_type;
  _type_type type;





  typedef std::shared_ptr< ::_object_recognition_msgs::GetObjectInformationRequest_<ContainerAllocator> > Ptr;
  typedef std::shared_ptr< ::_object_recognition_msgs::GetObjectInformationRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetObjectInformationRequest_

typedef ::_object_recognition_msgs::GetObjectInformationRequest_<std::allocator<void> > GetObjectInformationRequest;

typedef std::shared_ptr< ::_object_recognition_msgs::GetObjectInformationRequest > GetObjectInformationRequestPtr;
typedef std::shared_ptr< ::_object_recognition_msgs::GetObjectInformationRequest const> GetObjectInformationRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::_object_recognition_msgs::GetObjectInformationRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::_object_recognition_msgs::GetObjectInformationRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::_object_recognition_msgs::GetObjectInformationRequest_<ContainerAllocator1> & lhs, const ::_object_recognition_msgs::GetObjectInformationRequest_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::_object_recognition_msgs::GetObjectInformationRequest_<ContainerAllocator1> & lhs, const ::_object_recognition_msgs::GetObjectInformationRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace _object_recognition_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::_object_recognition_msgs::GetObjectInformationRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::_object_recognition_msgs::GetObjectInformationRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::_object_recognition_msgs::GetObjectInformationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::_object_recognition_msgs::GetObjectInformationRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::_object_recognition_msgs::GetObjectInformationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::_object_recognition_msgs::GetObjectInformationRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::_object_recognition_msgs::GetObjectInformationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0d72b69e80da0fe473b0bdcdd7a28d4d";
  }

  static const char* value(const ::_object_recognition_msgs::GetObjectInformationRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0d72b69e80da0fe4ULL;
  static const uint64_t static_value2 = 0x73b0bdcdd7a28d4dULL;
};

template<class ContainerAllocator>
struct DataType< ::_object_recognition_msgs::GetObjectInformationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "_object_recognition_msgs/GetObjectInformationRequest";
  }

  static const char* value(const ::_object_recognition_msgs::GetObjectInformationRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::_object_recognition_msgs::GetObjectInformationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Retrieve extra data from the DB for a given object\n"
"\n"
"# The type of the object to retrieve info from\n"
"_object_recognition_msgs/ObjectType type\n"
"\n"
"\n"
"================================================================================\n"
"MSG: _object_recognition_msgs/ObjectType\n"
"################################################## OBJECT ID #########################################################\n"
"\n"
"# Contains information about the type of a found object. Those two sets of parameters together uniquely define an\n"
"# object\n"
"\n"
"# The key of the found object: the unique identifier in the given db\n"
"string key\n"
"\n"
"# The db parameters stored as a JSON/compressed YAML string. An object id does not make sense without the corresponding\n"
"# database. E.g., in object_recognition, it can look like: \"{'type':'CouchDB', 'root':'http://localhost'}\"\n"
"# There is no conventional format for those parameters and it's nice to keep that flexibility.\n"
"# The object_recognition_core as a generic DB type that can read those fields\n"
"# Current examples:\n"
"# For CouchDB:\n"
"#   type: 'CouchDB'\n"
"#   root: 'http://localhost:5984'\n"
"#   collection: 'object_recognition'\n"
"# For SQL household database:\n"
"#   type: 'SqlHousehold'\n"
"#   host: 'wgs36'\n"
"#   port: 5432\n"
"#   user: 'willow'\n"
"#   password: 'willow'\n"
"#   name: 'household_objects'\n"
"#   module: 'tabletop'\n"
"string db\n"
;
  }

  static const char* value(const ::_object_recognition_msgs::GetObjectInformationRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::_object_recognition_msgs::GetObjectInformationRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetObjectInformationRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::_object_recognition_msgs::GetObjectInformationRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::_object_recognition_msgs::GetObjectInformationRequest_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    s << std::endl;
    Printer< ::_object_recognition_msgs::ObjectType_<ContainerAllocator> >::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_RECOGNITION_MSGS_MESSAGE_GETOBJECTINFORMATIONREQUEST_H
