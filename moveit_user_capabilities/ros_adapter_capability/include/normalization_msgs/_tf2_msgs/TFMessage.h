// Generated by gencpp from file _tf2_msgs/TFMessage.msg
// DO NOT EDIT!


#ifndef _TF2_MSGS_MESSAGE_TFMESSAGE_H
#define _TF2_MSGS_MESSAGE_TFMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <_geometry_msgs/TransformStamped.h>

namespace _tf2_msgs
{
template <class ContainerAllocator>
struct TFMessage_
{
  typedef TFMessage_<ContainerAllocator> Type;

  TFMessage_()
    : transforms()  {
    }
  TFMessage_(const ContainerAllocator& _alloc)
    : transforms(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::_geometry_msgs::TransformStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::_geometry_msgs::TransformStamped_<ContainerAllocator> >::other >  _transforms_type;
  _transforms_type transforms;





  typedef std::shared_ptr< ::_tf2_msgs::TFMessage_<ContainerAllocator> > Ptr;
  typedef std::shared_ptr< ::_tf2_msgs::TFMessage_<ContainerAllocator> const> ConstPtr;

}; // struct TFMessage_

typedef ::_tf2_msgs::TFMessage_<std::allocator<void> > TFMessage;

typedef std::shared_ptr< ::_tf2_msgs::TFMessage > TFMessagePtr;
typedef std::shared_ptr< ::_tf2_msgs::TFMessage const> TFMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::_tf2_msgs::TFMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::_tf2_msgs::TFMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::_tf2_msgs::TFMessage_<ContainerAllocator1> & lhs, const ::_tf2_msgs::TFMessage_<ContainerAllocator2> & rhs)
{
  return lhs.transforms == rhs.transforms;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::_tf2_msgs::TFMessage_<ContainerAllocator1> & lhs, const ::_tf2_msgs::TFMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace _tf2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::_tf2_msgs::TFMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::_tf2_msgs::TFMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::_tf2_msgs::TFMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::_tf2_msgs::TFMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::_tf2_msgs::TFMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::_tf2_msgs::TFMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::_tf2_msgs::TFMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94810edda583a504dfda3829e70d7eec";
  }

  static const char* value(const ::_tf2_msgs::TFMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94810edda583a504ULL;
  static const uint64_t static_value2 = 0xdfda3829e70d7eecULL;
};

template<class ContainerAllocator>
struct DataType< ::_tf2_msgs::TFMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "_tf2_msgs/TFMessage";
  }

  static const char* value(const ::_tf2_msgs::TFMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::_tf2_msgs::TFMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "_geometry_msgs/TransformStamped[] transforms\n"
"\n"
"================================================================================\n"
"MSG: _geometry_msgs/TransformStamped\n"
"# This expresses a transform from coordinate frame header.frame_id\n"
"# to the coordinate frame child_frame_id\n"
"#\n"
"# This message is mostly used by the \n"
"# <a href=\"http://wiki.ros.org/tf\">tf</a> package. \n"
"# See its documentation for more information.\n"
"\n"
"Header header\n"
"string child_frame_id # the frame id of the child frame\n"
"Transform transform\n"
"\n"
"================================================================================\n"
"MSG: _std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: _geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: _geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# _geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: _geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::_tf2_msgs::TFMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::_tf2_msgs::TFMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.transforms);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TFMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::_tf2_msgs::TFMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::_tf2_msgs::TFMessage_<ContainerAllocator>& v)
  {
    s << indent << "transforms[]" << std::endl;
    for (size_t i = 0; i < v.transforms.size(); ++i)
    {
      s << indent << "  transforms[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::_geometry_msgs::TransformStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.transforms[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TF2_MSGS_MESSAGE_TFMESSAGE_H
