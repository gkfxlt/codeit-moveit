// Generated by gencpp from file _moveit_msgs/OrientedBoundingBox.msg
// DO NOT EDIT!


#ifndef _MOVEIT_MSGS_MESSAGE_ORIENTEDBOUNDINGBOX_H
#define _MOVEIT_MSGS_MESSAGE_ORIENTEDBOUNDINGBOX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <_geometry_msgs/Pose.h>
#include <_geometry_msgs/Point32.h>

namespace _moveit_msgs
{
template <class ContainerAllocator>
struct OrientedBoundingBox_
{
  typedef OrientedBoundingBox_<ContainerAllocator> Type;

  OrientedBoundingBox_()
    : pose()
    , extents()  {
    }
  OrientedBoundingBox_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , extents(_alloc)  {
  (void)_alloc;
    }



   typedef  ::_geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::_geometry_msgs::Point32_<ContainerAllocator>  _extents_type;
  _extents_type extents;





  typedef std::shared_ptr< ::_moveit_msgs::OrientedBoundingBox_<ContainerAllocator> > Ptr;
  typedef std::shared_ptr< ::_moveit_msgs::OrientedBoundingBox_<ContainerAllocator> const> ConstPtr;

}; // struct OrientedBoundingBox_

typedef ::_moveit_msgs::OrientedBoundingBox_<std::allocator<void> > OrientedBoundingBox;

typedef std::shared_ptr< ::_moveit_msgs::OrientedBoundingBox > OrientedBoundingBoxPtr;
typedef std::shared_ptr< ::_moveit_msgs::OrientedBoundingBox const> OrientedBoundingBoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::_moveit_msgs::OrientedBoundingBox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::_moveit_msgs::OrientedBoundingBox_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::_moveit_msgs::OrientedBoundingBox_<ContainerAllocator1> & lhs, const ::_moveit_msgs::OrientedBoundingBox_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose &&
    lhs.extents == rhs.extents;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::_moveit_msgs::OrientedBoundingBox_<ContainerAllocator1> & lhs, const ::_moveit_msgs::OrientedBoundingBox_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace _moveit_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::_moveit_msgs::OrientedBoundingBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::_moveit_msgs::OrientedBoundingBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::_moveit_msgs::OrientedBoundingBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::_moveit_msgs::OrientedBoundingBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::_moveit_msgs::OrientedBoundingBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::_moveit_msgs::OrientedBoundingBox_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::_moveit_msgs::OrientedBoundingBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da3bd98e7cb14efa4141367a9d886ee7";
  }

  static const char* value(const ::_moveit_msgs::OrientedBoundingBox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda3bd98e7cb14efaULL;
  static const uint64_t static_value2 = 0x4141367a9d886ee7ULL;
};

template<class ContainerAllocator>
struct DataType< ::_moveit_msgs::OrientedBoundingBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "_moveit_msgs/OrientedBoundingBox";
  }

  static const char* value(const ::_moveit_msgs::OrientedBoundingBox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::_moveit_msgs::OrientedBoundingBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# the pose of the box\n"
"_geometry_msgs/Pose pose\n"
"\n"
"# the extents of the box, assuming the center is at the origin\n"
"_geometry_msgs/Point32 extents\n"
"\n"
"================================================================================\n"
"MSG: _geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: _geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: _geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: _geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::_moveit_msgs::OrientedBoundingBox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::_moveit_msgs::OrientedBoundingBox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.extents);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OrientedBoundingBox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::_moveit_msgs::OrientedBoundingBox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::_moveit_msgs::OrientedBoundingBox_<ContainerAllocator>& v)
  {
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::_geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "extents: ";
    s << std::endl;
    Printer< ::_geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.extents);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEIT_MSGS_MESSAGE_ORIENTEDBOUNDINGBOX_H
