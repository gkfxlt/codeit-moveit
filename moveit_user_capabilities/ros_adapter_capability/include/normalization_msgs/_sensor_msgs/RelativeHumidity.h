// Generated by gencpp from file _sensor_msgs/RelativeHumidity.msg
// DO NOT EDIT!


#ifndef _SENSOR_MSGS_MESSAGE_RELATIVEHUMIDITY_H
#define _SENSOR_MSGS_MESSAGE_RELATIVEHUMIDITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <_std_msgs/Header.h>

namespace _sensor_msgs
{
template <class ContainerAllocator>
struct RelativeHumidity_
{
  typedef RelativeHumidity_<ContainerAllocator> Type;

  RelativeHumidity_()
    : header()
    , relative_humidity(0.0)
    , variance(0.0)  {
    }
  RelativeHumidity_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , relative_humidity(0.0)
    , variance(0.0)  {
  (void)_alloc;
    }



   typedef  ::_std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _relative_humidity_type;
  _relative_humidity_type relative_humidity;

   typedef double _variance_type;
  _variance_type variance;





  typedef std::shared_ptr< ::_sensor_msgs::RelativeHumidity_<ContainerAllocator> > Ptr;
  typedef std::shared_ptr< ::_sensor_msgs::RelativeHumidity_<ContainerAllocator> const> ConstPtr;

}; // struct RelativeHumidity_

typedef ::_sensor_msgs::RelativeHumidity_<std::allocator<void> > RelativeHumidity;

typedef std::shared_ptr< ::_sensor_msgs::RelativeHumidity > RelativeHumidityPtr;
typedef std::shared_ptr< ::_sensor_msgs::RelativeHumidity const> RelativeHumidityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::_sensor_msgs::RelativeHumidity_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::_sensor_msgs::RelativeHumidity_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::_sensor_msgs::RelativeHumidity_<ContainerAllocator1> & lhs, const ::_sensor_msgs::RelativeHumidity_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.relative_humidity == rhs.relative_humidity &&
    lhs.variance == rhs.variance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::_sensor_msgs::RelativeHumidity_<ContainerAllocator1> & lhs, const ::_sensor_msgs::RelativeHumidity_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace _sensor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::_sensor_msgs::RelativeHumidity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::_sensor_msgs::RelativeHumidity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::_sensor_msgs::RelativeHumidity_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::_sensor_msgs::RelativeHumidity_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::_sensor_msgs::RelativeHumidity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::_sensor_msgs::RelativeHumidity_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::_sensor_msgs::RelativeHumidity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8730015b05955b7e992ce29a2678d90f";
  }

  static const char* value(const ::_sensor_msgs::RelativeHumidity_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8730015b05955b7eULL;
  static const uint64_t static_value2 = 0x992ce29a2678d90fULL;
};

template<class ContainerAllocator>
struct DataType< ::_sensor_msgs::RelativeHumidity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "_sensor_msgs/RelativeHumidity";
  }

  static const char* value(const ::_sensor_msgs::RelativeHumidity_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::_sensor_msgs::RelativeHumidity_<ContainerAllocator> >
{
  static const char* value()
  {
    return " # Single reading from a relative humidity sensor.  Defines the ratio of partial\n"
" # pressure of water vapor to the saturated vapor pressure at a temperature.\n"
"\n"
" Header header             # timestamp of the measurement\n"
"                           # frame_id is the location of the humidity sensor\n"
"\n"
" float64 relative_humidity # Expression of the relative humidity\n"
"                           # from 0.0 to 1.0.\n"
"                           # 0.0 is no partial pressure of water vapor\n"
"                           # 1.0 represents partial pressure of saturation\n"
"\n"
" float64 variance          # 0 is interpreted as variance unknown\n"
"================================================================================\n"
"MSG: _std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::_sensor_msgs::RelativeHumidity_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::_sensor_msgs::RelativeHumidity_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.relative_humidity);
      stream.next(m.variance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RelativeHumidity_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::_sensor_msgs::RelativeHumidity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::_sensor_msgs::RelativeHumidity_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::_std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "relative_humidity: ";
    Printer<double>::stream(s, indent + "  ", v.relative_humidity);
    s << indent << "variance: ";
    Printer<double>::stream(s, indent + "  ", v.variance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_MSGS_MESSAGE_RELATIVEHUMIDITY_H
