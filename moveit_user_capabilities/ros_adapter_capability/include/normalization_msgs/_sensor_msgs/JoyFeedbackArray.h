// Generated by gencpp from file _sensor_msgs/JoyFeedbackArray.msg
// DO NOT EDIT!


#ifndef _SENSOR_MSGS_MESSAGE_JOYFEEDBACKARRAY_H
#define _SENSOR_MSGS_MESSAGE_JOYFEEDBACKARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <_sensor_msgs/JoyFeedback.h>

namespace _sensor_msgs
{
template <class ContainerAllocator>
struct JoyFeedbackArray_
{
  typedef JoyFeedbackArray_<ContainerAllocator> Type;

  JoyFeedbackArray_()
    : array()  {
    }
  JoyFeedbackArray_(const ContainerAllocator& _alloc)
    : array(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::_sensor_msgs::JoyFeedback_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::_sensor_msgs::JoyFeedback_<ContainerAllocator> >::other >  _array_type;
  _array_type array;





  typedef std::shared_ptr< ::_sensor_msgs::JoyFeedbackArray_<ContainerAllocator> > Ptr;
  typedef std::shared_ptr< ::_sensor_msgs::JoyFeedbackArray_<ContainerAllocator> const> ConstPtr;

}; // struct JoyFeedbackArray_

typedef ::_sensor_msgs::JoyFeedbackArray_<std::allocator<void> > JoyFeedbackArray;

typedef std::shared_ptr< ::_sensor_msgs::JoyFeedbackArray > JoyFeedbackArrayPtr;
typedef std::shared_ptr< ::_sensor_msgs::JoyFeedbackArray const> JoyFeedbackArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::_sensor_msgs::JoyFeedbackArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::_sensor_msgs::JoyFeedbackArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::_sensor_msgs::JoyFeedbackArray_<ContainerAllocator1> & lhs, const ::_sensor_msgs::JoyFeedbackArray_<ContainerAllocator2> & rhs)
{
  return lhs.array == rhs.array;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::_sensor_msgs::JoyFeedbackArray_<ContainerAllocator1> & lhs, const ::_sensor_msgs::JoyFeedbackArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace _sensor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::_sensor_msgs::JoyFeedbackArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::_sensor_msgs::JoyFeedbackArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::_sensor_msgs::JoyFeedbackArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::_sensor_msgs::JoyFeedbackArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::_sensor_msgs::JoyFeedbackArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::_sensor_msgs::JoyFeedbackArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::_sensor_msgs::JoyFeedbackArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cde5730a895b1fc4dee6f91b754b213d";
  }

  static const char* value(const ::_sensor_msgs::JoyFeedbackArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcde5730a895b1fc4ULL;
  static const uint64_t static_value2 = 0xdee6f91b754b213dULL;
};

template<class ContainerAllocator>
struct DataType< ::_sensor_msgs::JoyFeedbackArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "_sensor_msgs/JoyFeedbackArray";
  }

  static const char* value(const ::_sensor_msgs::JoyFeedbackArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::_sensor_msgs::JoyFeedbackArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message publishes values for multiple feedback at once. \n"
"JoyFeedback[] array\n"
"================================================================================\n"
"MSG: _sensor_msgs/JoyFeedback\n"
"# Declare of the type of feedback\n"
"uint8 TYPE_LED    = 0\n"
"uint8 TYPE_RUMBLE = 1\n"
"uint8 TYPE_BUZZER = 2\n"
"\n"
"uint8 type\n"
"\n"
"# This will hold an id number for each type of each feedback.\n"
"# Example, the first led would be id=0, the second would be id=1\n"
"uint8 id\n"
"\n"
"# Intensity of the feedback, from 0.0 to 1.0, inclusive.  If device is\n"
"# actually binary, driver should treat 0<=x<0.5 as off, 0.5<=x<=1 as on.\n"
"float32 intensity\n"
"\n"
;
  }

  static const char* value(const ::_sensor_msgs::JoyFeedbackArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::_sensor_msgs::JoyFeedbackArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JoyFeedbackArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::_sensor_msgs::JoyFeedbackArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::_sensor_msgs::JoyFeedbackArray_<ContainerAllocator>& v)
  {
    s << indent << "array[]" << std::endl;
    for (size_t i = 0; i < v.array.size(); ++i)
    {
      s << indent << "  array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::_sensor_msgs::JoyFeedback_<ContainerAllocator> >::stream(s, indent + "    ", v.array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_MSGS_MESSAGE_JOYFEEDBACKARRAY_H
