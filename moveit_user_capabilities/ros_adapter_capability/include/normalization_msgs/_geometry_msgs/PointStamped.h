// Generated by gencpp from file _geometry_msgs/PointStamped.msg
// DO NOT EDIT!


#ifndef _GEOMETRY_MSGS_MESSAGE_POINTSTAMPED_H
#define _GEOMETRY_MSGS_MESSAGE_POINTSTAMPED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <_std_msgs/Header.h>
#include <_geometry_msgs/Point.h>

namespace _geometry_msgs
{
template <class ContainerAllocator>
struct PointStamped_
{
  typedef PointStamped_<ContainerAllocator> Type;

  PointStamped_()
    : header()
    , point()  {
    }
  PointStamped_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , point(_alloc)  {
  (void)_alloc;
    }



   typedef  ::_std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::_geometry_msgs::Point_<ContainerAllocator>  _point_type;
  _point_type point;





  typedef std::shared_ptr< ::_geometry_msgs::PointStamped_<ContainerAllocator> > Ptr;
  typedef std::shared_ptr< ::_geometry_msgs::PointStamped_<ContainerAllocator> const> ConstPtr;

}; // struct PointStamped_

typedef ::_geometry_msgs::PointStamped_<std::allocator<void> > PointStamped;

typedef std::shared_ptr< ::_geometry_msgs::PointStamped > PointStampedPtr;
typedef std::shared_ptr< ::_geometry_msgs::PointStamped const> PointStampedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::_geometry_msgs::PointStamped_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::_geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::_geometry_msgs::PointStamped_<ContainerAllocator1> & lhs, const ::_geometry_msgs::PointStamped_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.point == rhs.point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::_geometry_msgs::PointStamped_<ContainerAllocator1> & lhs, const ::_geometry_msgs::PointStamped_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace _geometry_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::_geometry_msgs::PointStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::_geometry_msgs::PointStamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::_geometry_msgs::PointStamped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::_geometry_msgs::PointStamped_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::_geometry_msgs::PointStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::_geometry_msgs::PointStamped_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::_geometry_msgs::PointStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c63aecb41bfdfd6b7e1fac37c7cbe7bf";
  }

  static const char* value(const ::_geometry_msgs::PointStamped_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc63aecb41bfdfd6bULL;
  static const uint64_t static_value2 = 0x7e1fac37c7cbe7bfULL;
};

template<class ContainerAllocator>
struct DataType< ::_geometry_msgs::PointStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "_geometry_msgs/PointStamped";
  }

  static const char* value(const ::_geometry_msgs::PointStamped_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::_geometry_msgs::PointStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This represents a Point with reference coordinate frame and timestamp\n"
"Header header\n"
"Point point\n"
"\n"
"================================================================================\n"
"MSG: _std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: _geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::_geometry_msgs::PointStamped_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::_geometry_msgs::PointStamped_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PointStamped_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::_geometry_msgs::PointStamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::_geometry_msgs::PointStamped_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::_std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "point: ";
    s << std::endl;
    Printer< ::_geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GEOMETRY_MSGS_MESSAGE_POINTSTAMPED_H
