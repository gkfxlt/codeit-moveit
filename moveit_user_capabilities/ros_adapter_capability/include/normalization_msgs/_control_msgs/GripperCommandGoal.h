// Generated by gencpp from file _control_msgs/GripperCommandGoal.msg
// DO NOT EDIT!


#ifndef _CONTROL_MSGS_MESSAGE_GRIPPERCOMMANDGOAL_H
#define _CONTROL_MSGS_MESSAGE_GRIPPERCOMMANDGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <_control_msgs/GripperCommand.h>

namespace _control_msgs
{
template <class ContainerAllocator>
struct GripperCommandGoal_
{
  typedef GripperCommandGoal_<ContainerAllocator> Type;

  GripperCommandGoal_()
    : command()  {
    }
  GripperCommandGoal_(const ContainerAllocator& _alloc)
    : command(_alloc)  {
  (void)_alloc;
    }



   typedef  ::_control_msgs::GripperCommand_<ContainerAllocator>  _command_type;
  _command_type command;





  typedef std::shared_ptr< ::_control_msgs::GripperCommandGoal_<ContainerAllocator> > Ptr;
  typedef std::shared_ptr< ::_control_msgs::GripperCommandGoal_<ContainerAllocator> const> ConstPtr;

}; // struct GripperCommandGoal_

typedef ::_control_msgs::GripperCommandGoal_<std::allocator<void> > GripperCommandGoal;

typedef std::shared_ptr< ::_control_msgs::GripperCommandGoal > GripperCommandGoalPtr;
typedef std::shared_ptr< ::_control_msgs::GripperCommandGoal const> GripperCommandGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::_control_msgs::GripperCommandGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::_control_msgs::GripperCommandGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::_control_msgs::GripperCommandGoal_<ContainerAllocator1> & lhs, const ::_control_msgs::GripperCommandGoal_<ContainerAllocator2> & rhs)
{
  return lhs.command == rhs.command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::_control_msgs::GripperCommandGoal_<ContainerAllocator1> & lhs, const ::_control_msgs::GripperCommandGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace _control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::_control_msgs::GripperCommandGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::_control_msgs::GripperCommandGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::_control_msgs::GripperCommandGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::_control_msgs::GripperCommandGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::_control_msgs::GripperCommandGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::_control_msgs::GripperCommandGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::_control_msgs::GripperCommandGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "86fd82f4ddc48a4cb6856cfa69217e43";
  }

  static const char* value(const ::_control_msgs::GripperCommandGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x86fd82f4ddc48a4cULL;
  static const uint64_t static_value2 = 0xb6856cfa69217e43ULL;
};

template<class ContainerAllocator>
struct DataType< ::_control_msgs::GripperCommandGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "_control_msgs/GripperCommandGoal";
  }

  static const char* value(const ::_control_msgs::GripperCommandGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::_control_msgs::GripperCommandGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"GripperCommand command\n"
"\n"
"================================================================================\n"
"MSG: _control_msgs/GripperCommand\n"
"float64 position\n"
"float64 max_effort\n"
;
  }

  static const char* value(const ::_control_msgs::GripperCommandGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::_control_msgs::GripperCommandGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GripperCommandGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::_control_msgs::GripperCommandGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::_control_msgs::GripperCommandGoal_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    s << std::endl;
    Printer< ::_control_msgs::GripperCommand_<ContainerAllocator> >::stream(s, indent + "  ", v.command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_MSGS_MESSAGE_GRIPPERCOMMANDGOAL_H
