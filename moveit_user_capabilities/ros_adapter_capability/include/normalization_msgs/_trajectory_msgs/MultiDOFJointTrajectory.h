// Generated by gencpp from file _trajectory_msgs/MultiDOFJointTrajectory.msg
// DO NOT EDIT!


#ifndef _TRAJECTORY_MSGS_MESSAGE_MULTIDOFJOINTTRAJECTORY_H
#define _TRAJECTORY_MSGS_MESSAGE_MULTIDOFJOINTTRAJECTORY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <_std_msgs/Header.h>
#include <_trajectory_msgs/MultiDOFJointTrajectoryPoint.h>

namespace _trajectory_msgs
{
template <class ContainerAllocator>
struct MultiDOFJointTrajectory_
{
  typedef MultiDOFJointTrajectory_<ContainerAllocator> Type;

  MultiDOFJointTrajectory_()
    : header()
    , joint_names()
    , points()  {
    }
  MultiDOFJointTrajectory_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , joint_names(_alloc)
    , points(_alloc)  {
  (void)_alloc;
    }



   typedef  ::_std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _joint_names_type;
  _joint_names_type joint_names;

   typedef std::vector< ::_trajectory_msgs::MultiDOFJointTrajectoryPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::_trajectory_msgs::MultiDOFJointTrajectoryPoint_<ContainerAllocator> >::other >  _points_type;
  _points_type points;





  typedef std::shared_ptr< ::_trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator> > Ptr;
  typedef std::shared_ptr< ::_trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator> const> ConstPtr;

}; // struct MultiDOFJointTrajectory_

typedef ::_trajectory_msgs::MultiDOFJointTrajectory_<std::allocator<void> > MultiDOFJointTrajectory;

typedef std::shared_ptr< ::_trajectory_msgs::MultiDOFJointTrajectory > MultiDOFJointTrajectoryPtr;
typedef std::shared_ptr< ::_trajectory_msgs::MultiDOFJointTrajectory const> MultiDOFJointTrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::_trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::_trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::_trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator1> & lhs, const ::_trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.joint_names == rhs.joint_names &&
    lhs.points == rhs.points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::_trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator1> & lhs, const ::_trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace _trajectory_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::_trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::_trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::_trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::_trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::_trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::_trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::_trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ef145a45a5f47b77b7f5cdde4b16c942";
  }

  static const char* value(const ::_trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xef145a45a5f47b77ULL;
  static const uint64_t static_value2 = 0xb7f5cdde4b16c942ULL;
};

template<class ContainerAllocator>
struct DataType< ::_trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "_trajectory_msgs/MultiDOFJointTrajectory";
  }

  static const char* value(const ::_trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::_trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The header is used to specify the coordinate frame and the reference time for the trajectory durations\n"
"Header header\n"
"\n"
"# A representation of a multi-dof joint trajectory (each point is a transformation)\n"
"# Each point along the trajectory will include an array of positions/velocities/accelerations\n"
"# that has the same length as the array of joint names, and has the same order of joints as \n"
"# the joint names array.\n"
"\n"
"string[] joint_names\n"
"MultiDOFJointTrajectoryPoint[] points\n"
"\n"
"================================================================================\n"
"MSG: _std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: _trajectory_msgs/MultiDOFJointTrajectoryPoint\n"
"# Each multi-dof joint can specify a transform (up to 6 DOF)\n"
"_geometry_msgs/Transform[] transforms\n"
"\n"
"# There can be a velocity specified for the origin of the joint \n"
"_geometry_msgs/Twist[] velocities\n"
"\n"
"# There can be an acceleration specified for the origin of the joint \n"
"_geometry_msgs/Twist[] accelerations\n"
"\n"
"duration time_from_start\n"
"\n"
"================================================================================\n"
"MSG: _geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: _geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# _geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: _geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: _geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
;
  }

  static const char* value(const ::_trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::_trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.joint_names);
      stream.next(m.points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MultiDOFJointTrajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::_trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::_trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::_std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "joint_names[]" << std::endl;
    for (size_t i = 0; i < v.joint_names.size(); ++i)
    {
      s << indent << "  joint_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_names[i]);
    }
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::_trajectory_msgs::MultiDOFJointTrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAJECTORY_MSGS_MESSAGE_MULTIDOFJOINTTRAJECTORY_H
